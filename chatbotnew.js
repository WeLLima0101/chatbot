const qrcode = require('qrcode-terminal');
const { Client, LocalAuth } = require('whatsapp-web.js');
const fs = require('fs');
const path = require('path');

// Cliente com armazenamento local para manter a sess√£o
const client = new Client({
    authStrategy: new LocalAuth({
        clientId: "client-one", // Identificador para m√∫ltiplas sess√µes
    }),
    puppeteer: {
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox'], // Evita problemas de permiss√µes
    },
});

let isClientInitialized = false; // Vari√°vel para evitar inicializa√ß√µes repetidas

// Verifica√ß√£o inicial do diret√≥rio de sess√£o
const sessionPath = './.wwebjs_auth/session-client-one/Default';
if (fs.existsSync(sessionPath)) {
    try {
        fs.rmdirSync(sessionPath, { recursive: true }); // Remove arquivos bloqueados
        console.log('Sess√£o antiga removida com sucesso.');
    } catch (err) {
        console.error('Erro ao remover a sess√£o antiga:', err.message);
    }
}

// Gerar QR Code quando necess√°rio
client.on('qr', (qr) => {
    if (!isClientInitialized) {
        console.log('QR Code gerado! Escaneie o c√≥digo abaixo para autenticar:');
        qrcode.generate(qr, { small: true });
    }
});

// Notifica√ß√£o de que a sess√£o foi iniciada
client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
    isClientInitialized = true;
});

// Tratamento de falha na autentica√ß√£o
client.on('auth_failure', (msg) => {
    console.error('Falha na autentica√ß√£o:', msg);
    if (!isClientInitialized) {
        console.log('Tentando reiniciar o cliente...');
        client.initialize();
    }
});

// Tratamento de desconex√£o
client.on('disconnected', (reason) => {
    console.log('Cliente desconectado. Motivo:', reason);

    // Tenta reiniciar o cliente automaticamente
    console.log('Tentando reconectar...');
    client.destroy().then(() => {
        client.initialize();
    }).catch((err) => {
        console.error('Erro ao tentar reinicializar o cliente:', err);
    });
});

// Inicializa o cliente
client.initialize();

// Delay para simular tempo de digita√ß√£o
const delay = ms => new Promise(res => setTimeout(res, ms));

// Estados para armazenar as respostas dos clientes
const clientStates = new Map();

// N√∫mero do administrador (substitua pelo n√∫mero correto no formato internacional)
const adminNumber = '551140150044@c.us';

// Fun√ß√£o para salvar dados no arquivo CSV
const saveToCSV = (data) => {
    const filePath = path.join(__dirname, 'solicitacoes.csv');

    try {
        // Verifica se o arquivo j√° existe
        const fileExists = fs.existsSync(filePath);

        // Define o cabe√ßalho e os dados a serem salvos
        const header = 'Projeto;Rua;N√∫mero;Bairro;Cidade;Email;Data/Hora\n';
        const newLine = `${data.project};${data.street};${data.number};${data.neighborhood};${data.city};${data.email};${new Date().toLocaleString()}\n`;

        // Se o arquivo n√£o existe, cria com o cabe√ßalho; caso contr√°rio, apenas adiciona uma nova linha
        if (!fileExists) {
            fs.writeFileSync(filePath, header + newLine, { encoding: 'utf8' });
            console.log('Arquivo CSV criado e dados salvos com sucesso!');
        } else {
            fs.appendFileSync(filePath, newLine, { encoding: 'utf8' });
            console.log('Dados adicionados ao arquivo CSV com sucesso!');
        }
    } catch (err) {
        console.error('Erro ao salvar no CSV:', err.message);
        client.sendMessage(
            adminNumber,
            `‚ö†Ô∏è Erro ao salvar os dados no CSV: ${err.message}. Verifique o arquivo ou o c√≥digo.`
        );
    }
};

// Funil
client.on('message', async msg => {
    const chat = await msg.getChat();

    // Menu inicial
    if (msg.body.match(/(menu|Menu|in√≠cio|Inicio|Oi|oi|Ol√°|ol√°|ola|Ola)/i) && msg.from.endsWith('@c.us')) {
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);
        const contact = await msg.getContact();
        const name = contact.pushname;
        await client.sendMessage(
            msg.from,
            `üåü *Ol√°, ${name.split(' ')[0]}!* Seja muito bem-vindo(a) √† *Status Servi√ßos*! üåü\n\n` +
            `Como posso ajud√°-lo(a) hoje? Escolha uma das op√ß√µes abaixo digitando o n√∫mero correspondente:\n\n` +
            `1Ô∏è‚É£ - *Conhecer nossos servi√ßos*\n` +
            `2Ô∏è‚É£ - *Solicitar or√ßamento*\n` +
            `3Ô∏è‚É£ - *Falar com um atendente*\n` +
            `4Ô∏è‚É£ - *Nossos contatos*\n` +
            `5Ô∏è‚É£ - *Outras d√∫vidas*\n` +
            `6Ô∏è‚É£ - *Encerrar conversa*\n\n` +
            `üìå *Dica*: Sempre que quiser voltar ao menu inicial, digite *menu*!`
        );
        return;
    }

    // Item 1: Conhecer nossos servi√ßos
    if (msg.body === '1' && msg.from.endsWith('@c.us')) {
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);
        await client.sendMessage(
            msg.from,
            'Oferecemos uma variedade de servi√ßos especializados para a conserva√ß√£o e manuten√ß√£o de fachadas, incluindo:\n\n' +
            'üßπ **Limpeza de Fachadas**: Remo√ß√£o eficaz de sujeira e polui√ß√£o, preservando a integridade e a est√©tica do edif√≠cio.\n' +
            'üé® **Pintura Predial**: Revitaliza√ß√£o da apar√™ncia das fachadas, contribuindo para a valoriza√ß√£o do patrim√¥nio imobili√°rio e prote√ß√£o contra intemp√©ries.\n' +
            'üõ†Ô∏è **Restaura√ß√£o de Fachadas**: Recupera√ß√£o de estruturas danificadas, garantindo seguran√ßa e prolongando a vida √∫til do edif√≠cio.\n' +
            'üíß **Impermeabiliza√ß√£o de Fachadas**: Preven√ß√£o de infiltra√ß√µes e deteriora√ß√µes, aumentando a durabilidade da constru√ß√£o.\n' +
            'üîß **Veda√ß√£o em Pele de Vidro**: Garantimos a veda√ß√£o de fachadas com vidro para evitar infiltra√ß√µes, preservar o isolamento t√©rmico e proteger contra ru√≠dos.\n\n' +
            'üìã **Mapeamento de Fachadas**: Avalia√ß√£o detalhada para identificar problemas e planejar manuten√ß√µes preventivas ou corretivas.\n\n' +
            'Para mais detalhes sobre nossos servi√ßos, visite: https://statusserv.com.br/servicos/'
        );

        await client.sendMessage(msg.from, 'Para voltar ao menu inicial, digite *menu*.');
        return;
    }

    // Item 2: Solicitar or√ßamento
    if (msg.body === '2' && msg.from.endsWith('@c.us')) {
        clientStates.set(msg.from, { state: 'awaiting_project' });
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);

        await client.sendMessage(msg.from, 'Por favor, descreva brevemente o projeto para o qual deseja solicitar or√ßamento.');
        return;
    }

    if (clientStates.get(msg.from)?.state === 'awaiting_project') {
        clientStates.get(msg.from).project = msg.body;
        clientStates.get(msg.from).state = 'awaiting_street';
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);

        await client.sendMessage(msg.from, '√ìtimo! Agora, por favor, informe o nome da rua onde o servi√ßo ser√° realizado.');
        return;
    }

    if (clientStates.get(msg.from)?.state === 'awaiting_street') {
        clientStates.get(msg.from).street = msg.body;
        clientStates.get(msg.from).state = 'awaiting_number';
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);

        await client.sendMessage(msg.from, 'Por favor, informe o n√∫mero do im√≥vel.');
        return;
    }

    if (clientStates.get(msg.from)?.state === 'awaiting_number') {
        clientStates.get(msg.from).number = msg.body;
        clientStates.get(msg.from).state = 'awaiting_neighborhood';
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);

        await client.sendMessage(msg.from, 'Agora, informe o bairro.');
        return;
    }

    if (clientStates.get(msg.from)?.state === 'awaiting_neighborhood') {
        clientStates.get(msg.from).neighborhood = msg.body;
        clientStates.get(msg.from).state = 'awaiting_city';
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);

        await client.sendMessage(msg.from, 'Por fim, informe a cidade onde o servi√ßo ser√° realizado.');
        return;
    }

    if (clientStates.get(msg.from)?.state === 'awaiting_city') {
        clientStates.get(msg.from).city = msg.body;
        clientStates.get(msg.from).state = 'awaiting_email';
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);

        await client.sendMessage(msg.from, 'Agora, por favor, informe um e-mail para contato e envio do or√ßamento.');
        return;
    }

    if (clientStates.get(msg.from)?.state === 'awaiting_email') {
        const data = clientStates.get(msg.from);
        data.email = msg.body;
        clientStates.delete(msg.from);

        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);

        await client.sendMessage(msg.from, 'Obrigado! Suas informa√ß√µes foram enviadas para nosso setor de or√ßamentos. Em breve, um respons√°vel entrar√° em contato.');

        // Salvar no CSV
        saveToCSV({
            project: data.project,
            street: data.street,
            number: data.number,
            neighborhood: data.neighborhood,
            city: data.city,
            email: data.email
        });

        const responsibleNumber = '551140150044@c.us';
        await client.sendMessage(
            responsibleNumber,
            `üì¢ *Nova Solicita√ß√£o de Or√ßamento!*\n\n` +
            `üìù *Projeto*: ${data.project}\n` +
            `üìç *Rua*: ${data.street}\n` +
            `üî¢ *N√∫mero*: ${data.number}\n` +
            `üèòÔ∏è *Bairro*: ${data.neighborhood}\n` +
            `üåÜ *Cidade*: ${data.city}\n` +
            `üìß *E-mail*: ${data.email}\n` +
            `üë§ *Solicitado por*: ${msg.from}\n\n` +
            `üöÄ Por favor, entre em contato com o cliente para fornecer mais detalhes ou confirmar o or√ßamento!`
        );

        await client.sendMessage(msg.from, 'Para voltar ao menu inicial, digite *menu*.');
        return;
    }

    // Item 3: Falar com um atendente
    if (msg.body === '3' && msg.from.endsWith('@c.us')) {
        try {
            await delay(3000);
            await chat.sendStateTyping(); // Simula digita√ß√£o
            await delay(3000);

            await client.sendMessage(
                msg.from,
                '‚úÖ *Solicita√ß√£o registrada!* Estamos avisando um respons√°vel para falar com voc√™. Por favor, aguarde um momento.'
            );

            const responsibleNumber = '551140150044@c.us'; // Substitua pelo n√∫mero correto
            await client.sendMessage(
                responsibleNumber,
                `üì¢ *Nova Solicita√ß√£o!*\n\nüë§ Um cliente deseja falar com um respons√°vel.\n` +
                `üì± *N√∫mero do Cliente*: ${msg.from}\n\n` +
                `üöÄ Por favor, entre em contato o mais breve poss√≠vel!`
            );

            await delay(3000);
            await client.sendMessage(
                msg.from,
                'üí¨ Enquanto isso, se precisar, voc√™ pode voltar ao menu inicial digitando *menu*.'
            );
        } catch (error) {
            console.error('Erro ao processar o item 3:', error);
            await client.sendMessage(
                msg.from,
                '‚ö†Ô∏è Ocorreu um erro ao processar sua solicita√ß√£o. Tente novamente mais tarde ou entre em contato diretamente conosco.'
            );
        }
        return;
    }

    // Item 4: Nossos contatos
    if (msg.body === '4' && msg.from.endsWith('@c.us')) {
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);
        await client.sendMessage(
            msg.from,
            'üìû *Nossos Contatos*:\n\n' +
            'üì± *WhatsApp*: (11) 95449-3758\n' +
            'üìû *Telefone*: (11) 4401-3402\n' +
            'üåê *Site*: https://statusserv.com.br\n\n' +
            'Estamos √† disposi√ß√£o para ajud√°-lo(a)!'
        );

        await client.sendMessage(msg.from, 'Para voltar ao menu inicial, digite *menu*.');
        return;
    }

    // Item 5: Outras d√∫vidas
    if (msg.body === '5' && msg.from.endsWith('@c.us')) {
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);
        await client.sendMessage(
            msg.from,
            '‚ùì *Outras D√∫vidas*:\n\n' +
            'Se precisar de mais informa√ß√µes, acesse nosso site ou entre em contato conosco. Estamos sempre prontos para ajudar!\n\n' +
            'üåê *Site*: https://statusserv.com.br'
        );

        await client.sendMessage(msg.from, 'Para voltar ao menu inicial, digite *menu*.');
        return;
    }

    // Item 6: Encerrar conversa
    if (msg.body === '6' && msg.from.endsWith('@c.us')) {
        await delay(3000);
        await chat.sendStateTyping();
        await delay(3000);
        await client.sendMessage(
            msg.from,
            'üîí *Conversa encerrada.*\n\n' +
            'Foi um prazer atender voc√™! Caso precise de mais informa√ß√µes ou deseje retomar a conversa, basta enviar *menu* ou qualquer mensagem que estaremos prontos para ajudar. üòä'
        );
        clientStates.delete(msg.from); // Limpa o estado do cliente, se existir
        return;
    }
});
